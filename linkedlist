#include <iostream>

/* The key to this algorithm is to set two pointers p1a nd p2 apart by (n - 1) nodes initially so
we want p2 to point to the(n - 1)th node from the start of the list then
we move p2 till it reaches the last node of the list.
Once p2 reaches end of the list p1 will be pointing to the nth node from the end of the list.
*/


// Function to return the nth node from the end of a linked list.
// Takes the head pointer to the list and n as input
// Returns the nth node from the end if one exists else returns NULL.

class LinkedListNode {
public:
	int data;
	LinkedListNode* next;
	
};


void nthToLast(LinkedListNode* head, int n) {
	// If list does not exist or if there are no elements in the list,return NULL
	if (head == NULL || n < 1) {
		std::cout << "fail" << std::endl;
	}

	// make pointers p1 and p2 point to the start of the list.
	LinkedListNode* p1 = head;
	LinkedListNode* p2 = head;

	// The key to this algorithm is to set p1 and p2 apart by n-1 nodes initially
	// so we want p2 to point to the (n-1)th node from the start of the list
	// then we move p2 till it reaches the last node of the list. 
	// Once p2 reaches end of the list p1 will be pointing to the nth node 
	// from the end of the list.

	// loop to move p2.
	for (int j = 0; j < n - 1; ++j) {
		// while moving p2 check if it becomes NULL, that is if it reaches the end
		// of the list. That would mean the list has less than n nodes, so its not 
		// possible to find nth from last, so return NULL.
		if (p2 == NULL) {
			std::cout << "fail2" << std::endl;
		}
		// move p2 forward.
		p2 = p2->next;
	}

	// at this point p2 is (n-1) nodes ahead of p1. Now keep moving both forward
	// till p2 reaches the last node in the list.
	while (p2->next != NULL) {
		p1 = p1->next;
		p2 = p2->next;
	}

	// at this point p2 has reached the last node in the list and p1 will be
	// pointing to the nth node from the last..so return it.
	std::cout << p1 << std::endl;

}

void insert()
{
	LinkedListNode* new_Node = new LinkedListNode();


}

void iterateList() {

}

int main() {
	LinkedListNode* head = nullptr;
	


}
